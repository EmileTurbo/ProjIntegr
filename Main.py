import speech_recognition as sr
from openai import OpenAI
import webbrowser
import textwrap
import os

# OpenAI setup
client = OpenAI(api_key="YOUR_OPENAI_KEY")

# Speech recognition setup
r = sr.Recognizer()
m = sr.Microphone()

# Activation word
activation_word = "marcus"  # Wake word to activate the assistant

# Trigger phrases and URLs
triggers = {
    "ouvre youtube": "https://www.youtube.com/",
    "ouvre google": "https://www.google.com/",
    "ouvre facebook": "https://www.facebook.com/"
}

# **New command for writing to a text document**
write_command = "√©cris dans le document"

# Path to the text document
document_path = "marcus_notes.txt"


# Function to format the response with line breaks
def format_response(text, line_length=80):
    return "\n".join(textwrap.wrap(text, line_length))


# Function to write text to the document
def write_to_document(text, path):
    """Writes the spoken text to a document."""
    mode = "a" if os.path.exists(path) else "w"  # Append if file exists, else create new
    with open(path, mode, encoding="utf-8") as file:
        file.write(text + "\n")
    print(f"üìù Texte ajout√© au document : {path}")


try:
    print("Un moment de silence...")
    with m as source:
        r.adjust_for_ambient_noise(source)
    print("Seuil d'√©nergie minimum r√©gl√© √† {}".format(r.energy_threshold))

    while True:
        print("\nüé§ Dis quelque chose (dit 'Marcus' pour activer) :")

        # Listen for the activation word
        with m as source:
            audio = r.listen(source)

        try:
            # Recognize the speech
            value = r.recognize_google(audio, language="fr-FR").lower()
            print(f"‚úÖ Tu as dit : {value}")

            # Check for activation word
            if activation_word in value:
                print("üöÄ Activation d√©tect√©e !")

                # Listen again for the actual command/question
                print("\nüîé En attente de la commande...")
                with m as source:
                    audio = r.listen(source)

                # Recognize the next speech
                value = r.recognize_google(audio, language="fr-FR").lower()
                print(f"üéØ Commande d√©tect√©e : {value}")

                # ‚úÖ Check for triggers
                trigger_matched = False
                for trigger, url in triggers.items():
                    if trigger in value:
                        print(f"üåê Ouverture de {url}")
                        webbrowser.open(url)
                        trigger_matched = True
                        break

                        # ‚úÖ Check for "write to document" command
                if write_command in value:
                    print("‚úçÔ∏è √âcriture dans le document...")

                    # Listen for the text to write
                    print("üó£Ô∏è Dis ce que tu veux √©crire :")
                    with m as source:
                        audio = r.listen(source)

                    # Recognize the text to write
                    text_to_write = r.recognize_google(audio, language="fr-FR").lower()

                    # Write the spoken text to the document
                    write_to_document(text_to_write, document_path)
                    trigger_matched = True

                # ‚úÖ If no trigger was detected, send to OpenAI
                if not trigger_matched:
                    completion = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system",
                             "content": "Tu es un assistant nomm√© Marcus Brossoit, tu donnes des r√©ponses max 100 mots et tu parles comme une personne en pr√©carit√© de Saint-J√©r√¥me avec des expressions qu√©b√©coises."},
                            {"role": "user", "content": value}
                        ]
                    )

                    # Display the response
                    response = completion.choices[0].message.content
                    formatted_response = format_response(response, line_length=80)
                    print(f"ü§ñ Marcus Brossoit:\n{formatted_response}")

            else:
                print("‚è≥ Aucun mot d'activation d√©tect√©, retour √† l'√©coute...")

        except sr.UnknownValueError:
            print("üòï Oops! J'ai pas bien compris")
        except sr.RequestError as e:
            print(f"üö´ Uh oh! Erreur de requ√™te: {e}")

except KeyboardInterrupt:
    print("\nüëã Au revoir !")